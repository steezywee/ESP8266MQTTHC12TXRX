#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <SoftwareSerial.h>
#include <WiFiUdp.h>
#include <NTPClient.h>

// WiFi credentials
const char* ssid = "ssid";
const char* password = "password";

// MQTT Broker settings
const char* mqtt_server = "broker_address";
const char* mqtt_client_id = "client_id";
const char* mqtt_user = "mqttuser";
const char* mqtt_password = "mqttpassword";

WiFiClient espClient;
PubSubClient mqttClient(espClient);

SoftwareSerial HC12(D4, D5); // RX, TX

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", -7 * 3600, 60000); // Mountain Time Zone offset is -7 hours

unsigned long lastTimeSent = 0;
const long interval = 60000; // 60 seconds

void setup_wifi() {
    delay(10);
    WiFi.hostname("IoT-ESP8266");  // Set custom hostname
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.println("Connecting to WiFi...");
    }
    Serial.println("Connected to WiFi");
}

void callback(char* topic, byte* payload, unsigned int length) {
    Serial.print("Message arrived on topic: ");
    Serial.print(topic);
    Serial.print(". Message: ");
    String messageTemp;

    for (int i = 0; i < length; i++) {
        messageTemp += (char)payload[i];
    }
    Serial.println(messageTemp);

    // Handle message for topic "COOP/cover/set"
    if (String(topic) == "COOP/cover/set") {
        if (messageTemp == "OPEN") {
            HC12.println("COOP_OPEN");
            Serial.println("Sent over HC12: COOP_OPEN");
        } else if (messageTemp == "CLOSE") {
            HC12.println("COOP_CLOSE");
            Serial.println("Sent over HC12: COOP_CLOSE");
        }
    }
}

void reconnectMQTT() {
    while (!mqttClient.connected()) {
        Serial.print("Attempting MQTT connection...");
        if (mqttClient.connect(mqtt_client_id, mqtt_user, mqtt_password)) {
            Serial.println("connected");
            mqttClient.subscribe("COOP/cover/set");
        } else {
            Serial.print("failed, rc=");
            Serial.print(mqttClient.state());
            Serial.println(" try again in 5 seconds");
            delay(5000);
        }
    }
}

void setup() {
    Serial.begin(9600); 
    HC12.begin(9600); 
    setup_wifi();
    mqttClient.setServer(mqtt_server, 1883);
    mqttClient.setCallback(callback);
    timeClient.begin();
    timeClient.update();

    Serial.println("Setup complete. Listening for MQTT messages...");
}

void loop() {
    if (!mqttClient.connected()) {
        reconnectMQTT();
    }
    mqttClient.loop();

    if (!timeClient.update()) {
        timeClient.forceUpdate();
    }

    // Send time over HC12 every minute
    unsigned long currentTime = millis();
    if (currentTime - lastTimeSent >= interval) {
        lastTimeSent = currentTime;

        String timeStr = timeClient.getFormattedTime();
        HC12.println(timeStr);
        Serial.println("Time sent over HC12: " + timeStr);
    }
}
